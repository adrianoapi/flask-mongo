# Criando databases
> use test_mongo
> db.movie.insert({'nome': 'Legionário'})

# Exibir bancos
> show databases
> show dbs

# Exibir as tabelas do banco
> show collections

# Excluindo uma base de dados
> db.dropDatabase()

# Removendo uma collection
> db.movie.drop()

# Create collectons
> db.createCollection('products', {validator: { $or : [ {name: { $type : 'string' }} ] }})

# Listando resultados
> db.products.find()

# Listando resultados com filtro
> db.movies.find({name: 'Filme 2'})

# $lt = maior, $gt = menor
> db.getCollection('users').find({
status: 'A',
age: {
$gt: 30
}
})

# Utilizando a condição OR
db.getCollection('users').find({
    $or: [
        {status: 'A'},
        {
            age: {
                $lt: 30
            }
        }
    ]
})

# Filtrando pelo elemento interno
db.getCollection('users').find({
"favorites.artist": "Picasso"
})

# Filtrando pelo array do registro
# um valor
db.getCollection('users').find({
badges: "black"
})

# mais que um valor
db.getCollection('users').find({
badges: ["black","blue"]
})

db.getCollection('users').find({
badges: ["black","blue"],
"favorites.artist": "Picasso"
})

# Verificar se existe algum item em que o objeto artist está vazio
db.getCollection('users').find({
"favorites.artist": {
$exists: false
}
})

# Verificar se existe algum item em que o objeto artist não está vazio
db.getCollection('users').find({
"favorites.artist": {
$exists: true
}
})

# Limitando as propriedades de respostas find/findOne()
db.getCollection('users').find({
"favorites.artist": {
$exists: true
}
}, { _id: 1, name: 1})


# Inserindo dados na collection
> db.movies.insert({name: 'Filme 1', author: 'Autor teste', date: new Date()})
> db.movies.insertOne({name: 'Filme 2', author: 'do filme 2', date: new Date()})
> db.movies.insertMany([{name: 'Movie 3', author: 'Teste', date: new Date()},{name: 'Filme 4', author: 'author 4', date: new Date()}])


# Get idade > 19
db.getCollection('users').find({
age: {
$gt: 19
}
})

#update mantendo apenas as informações atualizadas e escluindo as demais
db.getCollection('users').update({
_id: 2.0,
name: 'bob'
}, {
name: 'Adriano',
age: 32
})

#update mantendo todas as informações
db.getCollection('users').updateOne({
_id: 2.0,
}, {
$set: {
name: 'Adriano Atualizado'
}
})

# update multi
db.getCollection('users').update({
age: {
$gt: 19
}
}, {
$set: {
age: 26
}
}, {
multi: true
})

# Remover atributos de seu documento
# Rodando este comando você está dizendo que o usuário que tiver o _id igual a 2.0 deverá ter o atributo age removido do documento.
db.getCollection('users').update({
_id: 2.0,
}, {
$unset: {
age: 0
}
})


# renomear um determinado atributo de um determinado usuário
# terá o atributo name renomeado para nickname
db.getCollection('users').update({
_id: 2.0,
}, {
$rename: {
'name': 'nickname'
}
})
